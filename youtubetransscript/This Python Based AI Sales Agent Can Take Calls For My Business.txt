Detected language: en

 Hi everyone, this video is the third part of our video tutorial series where we are creating and cold calling AI sales agent which can help businesses in their initial sales process. At the end of this video, you will be able to create your own AI sales agent which will take both inbound and outbound calls from your potential customers. Take a look at this now I'm just going to hit send again. Yeah, I should get call and there you go. I have I'm getting the call from the two years. I just accepted. You have a trial account. You can remove this message at any time. Okay, so this is because I have a trial account. So just hit the key. Hello, Avi Jake. This is Sally from No Together. I see that your company specializes in AI powered WordPress plugin. I believe we can help streamline your business processes through AI automation. Would you be interested in learning more about our services? Yeah, sure, I'll be interested. That's great to hear. Let's schedule a meeting to discuss our AI automation services can benefit your business. Can you please provide me with your availability so we can set up a meeting through Calendly? Yeah, I'm free tomorrow. Great. I'll send you a calendar link to schedule a meeting for tomorrow. Looking forward to our discussion. Great, thank you. Bye. Just think about it. If you're looking for a product or service online and let's say you end up in a potential business website and you fill up all the form and then if the company takes days to call you back, you would have probably bought that product or service before even they would call you, isn't it? So that means businesses need faster solution and their initial sales process can be automated using AI and that's what we are going to create in this video completely from this scratch using Python. Now let's take a brief look to our design. If you have straight landed into this video, we have already discussed this design in greater details in the part one of this series. Use the video link on your right top to see that first. And then in the second part, we have already created an AI sales agent and we have also set up an STT server and made a both way communicating AI sales agent in the part two. Again, click the right top link and make sure to watch that as well. Now I am not going to go into a lot of details here in this diagram. The only thing that I want to mention here is that many of you have raised concerns that you are not able to run the STT server in your local because you do not have a GPPC and I think I have a good news for you. As part of this video, what we are trying to do is we are trying to integrate our AI sales agent with Twilio service to make the call to your potential customers phone number. Now what I have found out is that the Twilio itself provide the STT and TTS service as part of its product features. So we do not need to run any STT server in our local and that's what you will see when we will create our code. So if you are ready, let's dive in and go into my VS Code terminal and start creating the agent. Now before I go into my VS Code editor, just don't remind you that here what we are trying to do is make our AI sales agent talk with Twilio API and vice versa so that whenever user fills up the form in the website and hit the contact us button or similar button, then that's call should come to the AI sales agent and then AI sales agent can actually call and make the communication with your potential customer through the Twilio API. Now in the part two of our series, we have created the AI sales agent but that was only running in our local system, right? But here what we have to do is we have to make the AI sales agent available through API so that Twilio can make communication whenever it needs. Now with that said, have came into my VS Code editor and I'm going to create a file first and let's create the file so we created a file called Twilio AI sales agent.py and this is where we will create the code. So first thing first, as I said, we need to create this agent available through API that's why we would import the flask. So we have now imported the flask module and we're going to use the flask to create our app which would be available through API. Now what I have done is I have followed this documentation from Twilio website to understand how the connection would work, how to call Twilio API and everything else. I will let us the link in the description of this video so you can check out this documents. The first thing first that we need to do is to import the Twilio ML library to be able to use the Twilio APIs and Twilio also provide a rest client so you will also input that and finally we will just import our OpenAI module because this is an AI sales agent so basically all our response will be through OpenAI APIs. Now first we will initiate our flask application. This is the very essential step that we need to do to make sure that our AI sales agent is available through flask APIs. Now the next thing that you need to do is you need to come to Twilio website and you need to do a registration. So because I have already today's tutorial, I have already logged in. Now you can see that I have already got like 2.8 pound ortho of trial account balance so whenever you register first time I think you are going to get around 5 pound of free usage or credit that you can use to create this kind of demo and when you're ready you can probably just upgrade and make use of the Twilio API for your production application. Now here below you will see your account sid and auth token and you also need to enable your Twilio phone that you can easily do it. If you need any help regarding that let me know but there are plenty other YouTube videos available which will help you show how to create a Twilio phone number. So make sure you create the phone number because this is the phone number that your AI sales agent is going to use when it will make the call. Okay now that everything is set up what we are going to do. We are going to set our sid and auth token as I have copied it from the Twilio console. We will also now create the OpenAI API key. This will be used by the AI sales agent and finally I will set the front number which is the number that you have seen in the portal in the Twilio portal. So this is the number that the AI sales agent will use as I said before and then finally we will create the client which is using the Twilio REST client and here we will pass the sid and auth token. Now for your production application I don't recommend to hardcoded rather you can use the NB file or some other dynamic approach but for now I'm just going to hardcoded to explain it better to you. Now as I said this AI sales agent will be available through API so we will create the required functions or the API route. So the first route that we need is for start call. So this is the route which the AI sales agent will use to make the call using the Twilio API. Again going back to the diagram a potential customer would fill up their name, their phone number and their business use case here in the form. So ideally when they will submit it that call should come to the AI sales agent to initiate the call right. So that is why the method is post we will extract the JSON data sent with the post request such as customer name, contact number and customer business requirement. So we will extract it first how we would extract it, extract the data from request or JSON because the request to this API will come through JSON and then we will extract the customer name as from customer name JSON input same for phone numbers same for the business details. Now what your AI sales agent would do here is based on the information provided it should make a call to the customer through Twilio API and present itself or introduce itself. So that is what we will add a comment that use the extracted data to process the initial message. So what we will do here is we'll use a function which we will define later and in the function we will send the customer name and the business details. So the expected output from this method is the initial message that when your AI sales agent will call to the customer it will speak out. Now the response that will be played back over the Twilio API we will define it using the voice response class which is provided by the Twilio ML library. Then what we are doing is we are passing the initial message that will be received from this method and for the voice we will use poly.jsono. So basically 11 labs provide a list of voices. There are basic voice which is only available through your trial account and there are standard voice and premium voice which is chargeable of course but these are more you know human like output that you can use of course you need to pay for that but you can use these voices and there are a list of voices that you can use. Here I will add the link again for you to see what all voices that are available and what voices are in which category. Now because I am using the trial account I am going to use one of the basic voice but as with any communication next step is to gather the user input right so that is where what we will do we will create another route and we will redirect the code to call that particular route so that after the assistance say the initial message it will wait and gather the user's input and further processing. So we will define it later so we will say here to we define later and then finally what we will do is we make the call to the Twilio API we will provide the customer phone number and the from number and we will send the response that we have created here and make the rest API call and of course this is the URL and it needs to be a public URL so this is a splice folder which we will create later and then finally we will return a message that the call is initiated and then we will also attach the call sID or the system ID. You can go back to the diagram that means this response will be returned back to the calling application which is the form here or the init or whichever that we will take later. Okay so now let's let's do one thing let's first define this process initial message method and let's define our initial output. So we will come here and we will define the process initial message method and we'll put some splice folder message there we are going to define this later on and I see another error here so what we will do is define the app public event URL so that our error goes away. Okay now there is one there which is done let's complete defining all the rules that is required. Okay let's define the second route now that the call is initiated we need another API which will actually help to get the user response right so basically what will happen is Twilio will use this API to send the API response to us we name it as gather and it acts a boot gate and post actually it will actually post but for now I'm allowing boot gate and post and basically what it is doing it's it's it is gathering the customer speech input. Now how does it do so? First again like last time we initiate the voice response and then we say that gather gather the speech input and then once it is gather we need to send that response to another function or another route to process that and then the speech timeout you can say auto or you can say 10 second it is up to you to decide whether the user have stopped talking or user have stopped providing input so if you said auto then Twilio ML will use its automated it will use this automated timeout which will probably dynamic but if you want to set a specific timeout which is of 10 second or 5 second or 3 second you can set it here that means it will wait until 5 second and if it doesn't get a new response that means then it will know that user have stopped providing for the action let me provide a route but we will clear the loop in just a few minutes it's not defined yet but I'm just providing it here so that means once the speech is collected this function or this particular API will redirect to this API where the processing of the speech will happen. So when the processing will be done it will return a text response and that response from process speech will be kept into the gather variable so we are appending their response here. Now one of the important other thing that we want to do here is if the customer doesn't respond we want to loop back for a few times of course you want to set how many time you want to loop back that means if customer is not responding back then you probably want the AI agent to again ask can I please get your response or I didn't get that or something like that right so that's why you are calling it the gather call once again you can set how many times you want to set the loop but for now I'm just keeping it simple and now we will define the third route which is the process speech that we are going to call here. Now in the process speech what will happen is it will process the customer's speech input and respond accordingly. So before we process this speech with AI we need to get this speech input from the user and that is where we use request on value.gates speech result this will get this speech output in a text format. You remember I said we do not need any transcribed server running in our local because Twilio ML library is doing it for us so using this method we will get the text output or whatever user have provided input in the call and now once we have had this speech result ready we can then use AI to generate the response. I am so sorry to break your attention here as you know creating this kind of content takes a lot of effort time and cost just to help support the channel. I have created do Patreon membership that you can now subscribe to and help the channel grow and thank you for watching so far let's continue with the tutorial. Now again last like last time we are going to create another method called process message and we will provide this speech result here and based on this speech result AI will generate the output and then we will again send back the output to the user to make the communication just like a human communication. So for that reason we will again initiate the voice response module and then we are going to again call the same response.c and this time we will provide this response that we will get from the AI or the open AI output. Again we are going to use the same voice poly.joana now what we want to do is we do not want to end the conversation here because the conversation could be multi-step. So that is where once joana will get back the response based on user input we will again call together root which will again gather the user input or it will wait for the user input and again together we will call the process speech. So if this both API will call each other and make a loop and in a way the conversation will continue. Now you might ask there should be a point where we want to break. Yes that is right but at the moment we will just keep it simple considering that after the conversation user will disconnect the call but in real life you want to handle that as well and then finally we will return this string response back to the gather. Okay so finally we create a root call event and this is the event that will be called from here you know the event URL. The event URL is nothing but if you want to control what will happen at the end of the call. For example in our next part where we will probably integrate the CI agent with third-body applications or in 8 and or maybe calendar. So maybe what you want is once the call is ended you will get the event as the call has ended so to email will make sure to inform you through this event endpoint and then you will probably call the in 8 and to send out the message with the calendar link or maybe do an appointment looking based on your use case really. I hope that these are all making sense to you. Now a few things that we need to fix we need to first define the process message function. So we come here and we define the process message and we again send the same placeholder message here. Now let's define this two method where we would use open AI or AI to generate the response. Two things that we need to make sure while this AI says agent is making the communication one we need to save the message history so that the AI knows the full context of the conversation. For example we do not want the AI says agent to repeat the same question that user have already answered right that will not be a new man like conversation. So for that we need to store the message history and use the message history in the AI response so that AI know what stage of the conversation the the ises agent in and based on that it makes the output and now because this is a web API or it's a flash based application the best place to store the message history is in this session. For that what we will do will create just a secret key and and then here in the initial message this is the initial message that means this map method is being called during the start call function calling. So here we are adding a dictionary of message history. Here we are setting the system context and we are saying your name is Sally your and expert sales representative are not together following a customer in quite a while our website you're initiating the code call to progress them further into this journey as you are initiating the call very briefly introduce yourself. So at this stage as part of processing initial message we just want our AI agent to introduce herself or itself then in the further process message we want the conversations to go. Now the message history dictionary is defined now you remember that this method will receive the customer name and customer business details so we want the AI respond to be curated for that specific user so that is why we will create a user prompt where we'll just the customer name and the customer business details as an initial transcript and then we will append the transcript as role user. So this is the user prompt and in the user prompt we are providing the customer name and customer business details so when AI will create the response for the initial message or the introduction phase it will be you know fine June and very specific for that customer because it because AI would know the customer name and the and the details that customer provided. Now as I said we need to store this message history in a session so that is why what we do is we create a session variable of message history and we append this particular information we do not need this information really because this is just an initial system prompt we do not need that all we need is these details because based on these details further in the communication the AI agent can refer the customer by its name or by its business requirement etc etc and then finally we are calling the open AI's endpoint we are providing the message history which contains both the system context and the user prompt and then we specify maximum token as 100 and it will generate the AI response. Once open AI response back we save it as assistant response and again we will add the assistant response into the message history so that in the next call to the AI we will pass these details so that I would know what all communication that has already happened with the user and when all of these things are done we will return the assistant response so basically if you see this start call it gets the assistant response and it returns back the assistant response using this response dot say method. I really hope these are all making sense to you in a very similar way I have created the process message function as well and I'm going to paste in the whole function here and I'm going to explain to you so basically again what we are saying is if the message history is not present in session then create a session variable but process message is only going to be called as part of the process speech so that means in most scenario especially in your outbound call scenario you will have this session variable call message history it's retrieving the message history from the session variable and then this is just a kind of a debug statement to print what all contain that is there in the message history so far and here what I'm doing is we are adding another system context and we are seeing your expert sense representative this is the system from that will be passed to the open AI calling here so that it reads the messages tree up here which contains the previous user input and the AI systems introductory input and based on that it will generate a response first time now let's say the second time when this method will call because you have seen the gather and process messages in the loop then it will know what all conversation has happened because we are adding that assistant response in this method into again into the session variable and again after the processing we are just printing out in our log and then we are returning the assistant response so this assistant response is being returned as part of the process speech API call right one of the things that we want to do is whenever the call is disconnected we want to clear the message history session variable the reason is because we don't the same message history to be used in another person's communication right so that is why we have said if the call status is completed with your fill please clear the message history that's it so this is our initial AI session which is ready to be tested with Twilio ML library and Twilio API now before we even go ahead and test it what we need to do is we need to install something called ngrok now I have already covered about ngrok in some of my previous video I will add a link but basically ngrok is ngrok is a reverse proxy so what will happen is because this code will run in my local the way we can make this public this particular API public is by using ngrok if I tie if you are like ngrok HTTP 5000 this will create the public URL will copy that and we'll use it here so this is the public URL that will be used and then we also want to set our gather URL here which will be public URL slash gather and then the event URL is public URL plus event we also set the process URL as process speech okay so our Twilio AI sales agent is ready for test so before we go ahead and test it what we have to do is we have to copy this URL and we need to let Twilio know where our API is listed so for that reason what we have to do is to come to the Twilio console click on active numbers click there click the number that you have and then here we will specify the URL so now what will happen is when a call is coming or if there is any web book that needs to be called it knows where to call so we just save the configuration here so now we are completely ready to give it a test so let's test it okay so trace the application what I'm going to do is I'm going to open post-line and then I'm going to copy this URL and then replace the URL here I'm providing my name my phone number and then the business details and if I hit send this should make a call to my phone number and the AI sales agent should work let's give it a test so I'll click send okay I haven't started the application yet TTS test I will separately create the requirement TXT for you now you know I have already installed all the requirement files to run this project so simply I'm just going to save python twilio ai sales agent.py okay so now it's running and now I'm just going to hit send again yeah I should get call and there you go I have I'm getting the call from the twilios just accept it you have a trial account you can remove this message at any time okay so this is because I have a trial account so just eight key hello obvi jake this is Sally from no together I see that your company specializes in AI powered WordPress plugin I believe we can help streamline your business processes through AI automation would you be interested in learning more about our services yeah sure I'll be interested that's great to hear let's schedule a meeting to discuss our AI automation services can benefit your business can you please provide me with your availability so we can set up a meeting through calendar yeah I'm free tomorrow great I'll send you a calendar link to schedule a meeting for tomorrow looking forward to our discussion great thank you bye now you may have noticed that the voice output was not really very realistic right we want this to be more human like conversation so we want more realistic voice and that is why what we have done is I have created another in a code which is more production like and we are using 11 laps API and then I've also critical what press plugin if you go to our website you will be able to see that you know contact from like plugin here and this plugin you will provide all the details and once you make you once you click contact us this should be able to call to your locally hosted AI sales agent now let's test it quickly so let's see if my yeah this is running and then if I hit contact us I can see the start call if it hadn't been called and then there is this AI agent is calling you can remove this message at any time by upgrading to a fully count press any key to execute your code yeah so let's execute it I'm good this is Sally from No 2 together I understand you're in the software development industry specializing in AI powered WordPress plugin how can we assist you in automating your business processes through AI so as you can hear now this time the voice is a little bit more realistic I am so sorry to keep this the 2.0 11 laps code behind a very affordable paywall just to help grow and support the cost of creating this kind of tutorial and testing it if you really want to help me and grow the channel please make a consideration to use the link below and purchase the code I promise you this is really really affordable and in the package you will get the entire code where you have both the inbound and outbound sense capability and the step by step guide plus you will get the WordPress plugin which you can use in your WordPress site and plus any update to the existing code plus in the next video we are going to integrate this AI sales agent with custom to be calling like Allen Lee and all the other things that will also be included in the same package for the first 20 members you can use a discount code load together 50 and you get a 50% discount please know this is only for the first 20 supporters of this channel for those of you who have already made a purchase as part of the part 2 codes you will get all this code for free you don't need to pay anything extra so with that said I am going to end this video right here in the next part of the video as I said I am going to integrate this AI sales agent with custom tools where we can call different utilities such as Allen Lee or N10 and I will also work on this code to make it more production ready so you probably even if you buy the code right now you will probably see more updates in the future thank you for watching the video if you are getting any value out of the video please like the video so that it reaches our audience subscribe to the channel and I'll see you in the next one bye